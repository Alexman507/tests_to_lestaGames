# На языке Python или С++ предложить алгоритм,
# который быстрее всего (по процессорным тикам) отсортирует данный ей массив чисел.
# Массив может быть любого размера со случайным порядком чисел (в том числе и отсортированным).
# Объяснить, почему вы считаете, что функция соответствует заданным критериям.

import random


def quicksort(arr):
    """
    Реализация быстрой сортировки.
    Алгоритм использует рандомизированный выбор опорного элемента для улучшения производительности
    на случайных данных и предотвращения деградации в худшем случае.
    Почему Quicksort?
    - В среднем O(n log n), что соответствует самым быстрым алгоритмам сортировки.
    - Простота реализации и высокая скорость на реальных данных благодаря минимальному числу сравнений.
    - Рандомизированный выбор опорного элемента снижает вероятность худшего случая O(n^2).
    - Проще реализовать, чем Timsort.
    """
    if len(arr) <= 1:
        return arr

    pivot = random.choice(arr)  # Случайный выбор опорного элемента
    left = [x for x in arr if x < pivot]  # Меньше опорного элемента
    middle = [x for x in arr if x == pivot]  # Равны опорному элементу
    right = [x for x in arr if x > pivot]  # Больше опорного элемента

    # Рекурсивная сортировка подмассивов
    return quicksort(left) + middle + quicksort(right)


arr = [random.randint(0, 100) for _ in range(10)]
print("Исходный массив:", arr)
sorted_arr = quicksort(arr)
print("Отсортированный массив:", sorted_arr)
